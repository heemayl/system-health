#!/usr/bin/env bash

#
# system_health_checker_notifier.sh
#
# Monitors load average, memory usage and disk usage of the system
# against given respective thresholds (given via environmment
# variables, see below); generates report and sends that via mail.
# Suitable for running via system startup script or via `cron`.
#
# Copyright Â© 2018 Readul Hasan Chayan <me@heemayl.net>
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.
#


# Thresholds; modify to meet the need
# Load average threshold; notify if load average > number
LOAD_THLD=2
# Memory availability threshold; notify if % of memory available < number
MEM_AVAIL_THLD=25
# Disk usage threshold, all filesystems; notify if % of disk used > number
DISK_USAGE_THLD=75

# Mail configuration
TO_ADDR='foo@example.com'
FROM_ADDR='bar@example.com'
SUBJECT="Server Status Report : generated by $0"


export PATH="/usr/bin:/usr/sbin:/bin:/sbin"

while :; do
    load_high_mail=$(awk -v thld="${LOAD_THLD}" \
			 '{one=$1+0; five=$2+0; fifteen=$3+0; if(one>=thld || five>=thld || \
                           fifteen>=thld) print $0}' /proc/loadavg)
    
    memory_avail_mail=$(free -m | awk -v thld="${MEM_AVAIL_THLD}" \
				      'NR==1{head=$0; next}; {tot=$2+0; avl=$NF+0; if (tot != 0 && \
                                        ((avl * 100)/tot) < thld) mail=sprintf("%s\n%s\n", mail, $0)}; \
                                          END {if (match(mail, "[0-9]+") != 0) {printf("%s\n%s\n", head, mail)}}')
    
    disk_usage_mail=$(df -h | awk -v thld="${DISK_USAGE_THLD}" \
				  'NR==1{head=$0; next}; {cur=substr($5, 1, (length($5) -1))+0; if(cur > thld) \
                                    {mail=sprintf("%s\n%s", mail, $0)}}; END {if (match(mail, "[0-9]+") != 0) \
                                      {printf("%s\n%s\n", head, mail)}}')

    mail="${load_high_mail}${memory_avail_mail}${disk_usage_mail}"

    if [[ $mail ]]; then
	tcp_sessions=$(ss -ant | awk 'NR > 1 && $4 ~ "[0-9]+:443$" {count+=1} END {print count}')
	out_mail=$(printf '%s\n\nSessions: %s\n---\n\n%s\n\n%s\n\n%s\n' "$mail" "${tcp_sessons:-0}" "$(</proc/loadavg)" "$(free -m)" "$(df -h)")
	mailx -r "${FROM_ADDR}" -s "${SUBJECT}" "${TO_ADDR}" <<<"${out_mail}"
	sleep $((15 * 60))  # wait 15 mins after sending a mail
	continue
    fi
    sleep $((2 * 60 ))  # wait 2 mins to loop again
done

